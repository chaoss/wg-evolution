#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
# Copyright (C) 2019 CHAOSS
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.
#
# Authors:
#     Aniruddha Karajgi <akarajgi0@gmail.com>
#

from datetime import datetime
import argparse
import sys
import logging

from perceval.backends.core.github import GitHub
from perceval.backends.core.git import Git

from implementations.generate_output import GenerateOutput

from implementations.code_df.conditions import Naive, PostfixExclude, DirExclude
from implementations.code_df.conditions import MasterInclude, EmptyExclude, MergeExclude

from implementations.code_df.code_changes_git import CodeChangesGit
from implementations.code_df.code_changes_lines_git import CodeChangesLinesGit

from implementations.code_df.reviews_github import ReviewsGitHub
from implementations.code_df.reviews_accepted_github import ReviewsAcceptedGitHub
from implementations.code_df.reviews_declined_github import ReviewsDeclinedGitHub
from implementations.code_df.reviews_duration_github import ReviewsDurationGitHub


COMMIT_CATEGORY = 'commit'
ISSUE_CATEGORY = 'issue'
PULL_REQUEST_CATEGORY = 'pull_request'

GITHUB_URI = "http://github.com/"
COMMIT_METRICS = \
            [
                CodeChangesGit,
                CodeChangesLinesGit
            ]

ISSUE_METRICS = []

PULLREQUEST_METRICS = \
            [
                ReviewsGitHub,
                ReviewsAcceptedGitHub,
                ReviewsDeclinedGitHub,
                ReviewsDurationGitHub
            ]

METRICS = \
    {
        COMMIT_CATEGORY: COMMIT_METRICS,
        ISSUE_CATEGORY: ISSUE_METRICS,
        PULL_REQUEST_CATEGORY: PULLREQUEST_METRICS
    }


LOG_FORMAT = "[%(asctime)s] - %(message)s"
DEBUG_LOG_FORMAT = "[%(asctime)s - %(name)s - %(levelname)s] - %(message)s"


def configure_logging(debug):
    """
    Configure logging.

    This function sets basic attributes for logging.

    :param debug: set the debug mode
    """

    if not debug:
        logging.basicConfig(level=logging.INFO,
                            format=LOG_FORMAT)
    else:
        logging.basicConfig(level=logging.DEBUG,
                            format=DEBUG_LOG_FORMAT)


def parse_args():
    parser = argparse.ArgumentParser(
        description="Analyze script argument parser"
    )

    parser.add_argument("-t", "--api-token",
                        default=None,
                        help="GitHub API token")

    parser.add_argument("-r", "--repo",
                        required=True,
                        help="GitHub repository, as 'owner/repo'")

    parser.add_argument("-s", "--since",
                        default=None,
                        help="Start date for item consideration. ('%%Y-%%m-%%d' format)")

    parser.add_argument("-u", "--until",
                        default=None,
                        help="End date for item consideration. ('%%Y-%%m-%%d' format)")

    parser.add_argument("-cat", "--categories",
                        default=[COMMIT_CATEGORY],
                        nargs='+',
                        choices=[COMMIT_CATEGORY, ISSUE_CATEGORY, PULL_REQUEST_CATEGORY],
                        help="Possible options: %(choices)s (any combination)")

    parser.add_argument("-c", "--conds",
                        default=[],
                        nargs='+',
                        choices=['MergeExclude', 'EmptyExclude', 'MasterInclude'],
                        help="Restrictions on which commits to include."
                        " Possible options: %(choices)s (any combinations)")

    parser.add_argument("-i", "--is-code",
                        default=['Naive'],
                        nargs='+',
                        choices=['Naive', 'PostfixExclude', 'DirExclude'],
                        help="Definition of Source Code."
                             "Possible options: %(choices)s (any combination)")

    parser.add_argument("-pf", "--postfixes-to-exclude",
                        default=['.md', 'README'],
                        nargs='+',
                        help="Files to be excluded based on their extension."
                        "Examples: .md, README")

    parser.add_argument("-de", "--dirs-to-exclude",
                        default=['tests', 'bin'],
                        nargs='+',
                        help="Files to be excluded based on their path."
                             "Examples: tests, bin, docs")

    parser.add_argument("-p", "--period",
                        default='M',
                        help="period for time-series: 'M', 'W', 'D', etc."
                             "Any valid pandas Period frequency")

    parser.add_argument("-o", "--output-formats",
                        default=['json'],
                        nargs='+',
                        choices=['json', 'pdf', 'images'],
                        help="Possible options: %(choices)s (any combination)")

    parser.add_argument("-d", "--debug",
                        action='store_true')

    parser.add_argument("-w", "--write-to",
                        default='results_dir',
                        help="Path for output results")
    return parser.parse_args()


def run_metrics(items, categories, date_range, is_code, conds):
    """
    Calculate values of metrics on the given data (items).

    :param items: A list of dictionaries.
        Each item is a Perceval dictionary, obtained from a JSON
        file or from Perceval directly.

    :param categories: A list of metric categories. A combination of
        COMMIT_CATEGORY, ISSUE_CATEGORY and PULL_REQUEST_CATEGORY.

    :param date_range: A tuple which represents the period of interest
        It is of the form (since, until), where since and until are strings.
        Either, or both can be None. If, for example, since is None, that
        would mean that all commits from the first commit to the commit
        who last falls inside the until range will be included.

    :param is_code:  list of Code Condition objects
        Used to determine what comprises source code.

    :param conds: list of Commit sub-class objects.
        Used to add restrictions on which commits are
        included in the analysis.

    :returns results: A dictionary with the computed values of metrics,
        groups according to the category of metrics.
    """

    logging.info("Running metrics")
    results = {
        COMMIT_CATEGORY: [],
        ISSUE_CATEGORY: [],
        PULL_REQUEST_CATEGORY: []
    }

    for category in categories:
        for metric in METRICS[category]:

            if category == COMMIT_CATEGORY:
                metric_obj = metric(items[category], date_range,
                                    is_code, conds)
            else:
                metric_obj = metric(items[category], date_range)

            logging.info("Computing the value of: %s" % str(metric_obj))

            result = {
                        'metric': metric_obj,
                        'value': metric_obj.compute(),
                    }

            results[category].append(result)

    logging.info("Metrics computed")

    return results


def fetch_data(owner, repository, api_token, categories):
    """
    Fetches data required for the analysis.

    Depending on the category of metrics to be computed, this function
    calls the Git (commits) and the GitHub backend (issues, pull_requests).

    :param owner: The owner of a repository
    :param repository: The name of a git repository
    :param api_token: GitHub API token
    :param categories: A list of metric categories. A combination of
        COMMIT_CATEGORY, ISSUE_CATEGORY and PULL_REQUEST_CATEGORY.

    :returns data: A dictionary of fetched items, segregated by category.
    """

    api_token = [] if api_token is None else api_token

    logging.info("Fetching data")
    data = {
        COMMIT_CATEGORY: [],
        ISSUE_CATEGORY: [],
        PULL_REQUEST_CATEGORY: []
    }

    for category in categories:
        if category == COMMIT_CATEGORY:

            repo_uri = GITHUB_URI + owner + '/' + repository + '.git'
            print(repo_uri)
            git = Git(uri=repo_uri, gitpath='tmp')
            items = list(git.fetch(category=category))

        else:
            github = GitHub(owner=owner, repository=repository,
                            api_token=api_token)
            items = list(github.fetch(category=category))

        data[category] = items

    data['issue'] = [item for item in data['issue'] if 'pull_request' not in item]
    return data


def main():
    """
    A script for evaluating the values of Evolution WG metrics on user data.
    Data is fetched using Perceval's back-ends and metrics are evaluated on it.

    The results of the analysis can be output in several different formats.
    Currently, json, pdf and images are supported.

    The script can be run via the command line:
        $ analyze -r chaoss/wg-evolution

    Examples:
    --------

    * Run all commit metrics on chaoss/wg-evolution, starting from 2018-01-01
    and using the api-token xxxx:
        $ analyze -r chaoss/wg-evolution -s 2018-01-01 -t xxxx  -cat commit

    * Run all metrics on chaoss/grimoirelab-perceval and generate a pdf report
    of the results:
        $ analyze -r chaoss/grimoirelab-perceval -o pdf

    * Run commit metrics on chaoss/wg-evolution considering only non-empty commits
    created on the master branch
        $ analyze -r chaoss/wg-evolution -cat commit -c EmptyExclude MasterInclude
    """

    args = parse_args()

    # owner and repo parsing
    owner, repo = args.repo.split('/')

    # date parsing
    since = datetime.strptime(args.since, "%Y-%m-%d") if args.since else None
    until = datetime.strptime(args.until, "%Y-%m-%d") if args.until else None

    date_range = (since, until)

    # conds parsing
    conds_options = {
        'MergeExclude': MergeExclude(),
        'EmptyExclude': EmptyExclude(),
        'MasterInclude': MasterInclude()
    }

    conds = [conds_options[option] for option in args.conds]

    # is_code parsing
    is_code_options = {
        'Naive': Naive(),
        'PostfixExclude': PostfixExclude(args.postfixes_to_exclude),
        'DirExclude': DirExclude(args.dirs_to_exclude)
    }

    is_code = [is_code_options[option] for option in args.is_code]

    configure_logging(args.debug)

    # fetching data
    items = fetch_data(owner, repo, [args.api_token], args.categories)

    # computing the values of metrics
    results = \
        run_metrics(
                        items, args.categories,
                        date_range=date_range, is_code=is_code,
                        conds=conds
                    )

    # generating output
    generate_output = GenerateOutput(results, args.output_formats,
                                     args.write_to, args.period)
    generate_output.generate()


if __name__ == '__main__':
    try:

        main()
    except KeyboardInterrupt:
        s = "\n\nReceived Ctrl-C or other break signal. Exiting.\n"
        sys.stderr.write(s)
        sys.exit(0)
